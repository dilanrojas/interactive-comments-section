---
import Comment from './Comment.astro';
import CommentBox from '../components/CommentBox.astro';
import Replies from "./Replies.astro";
import DeleteModal from './DeleteModal.astro';
---

<section class="container comments">

  <div class="comment-section">
    <Comment />
    <Replies />
  </div>

  <div class="comment-form">
    <CommentBox />
  </div>

  <DeleteModal />

</section>

<style>
  .comments {
    display: flex;
    flex-direction: column;
    gap: .5em;
  }

  .comment-section {
    display: flex;
    flex-direction: column;
    gap: 1em;
  }
</style>

<script>

  import { currentUser, comments } from "../../data.json"

  const commentTemplate = document.querySelector(".comment")
  const commentSection = document.querySelector(".comment-section")
  const commentBox = document.querySelector(".comment-box")
  const replyBox = document.querySelector(".reply-section")
  const deleteModal = document.querySelector(".delete-modal") as HTMLElement
  const commentArea = document.querySelector(".comments")

  const currentUserAvatar = currentUser.image.webp
  const currentUsername = currentUser.username

  let openForm = false

  // Hide templates
  commentTemplate.remove()
  commentBox.remove()
  replyBox.remove()
  deleteModal.remove()

  // ---- Append Comments ----

  // Create comment
  function appendComment(
    newID, newScore, newAvatar, newUsername, newCreatedAt, newContent, appendTo
  ) {
    var comment = document.createElement("div")
    comment.innerHTML = commentTemplate.outerHTML
    const commentContent = comment.querySelector(".comment")
    commentContent.id = newID
    appendTo.appendChild(comment)

    const score = commentContent.querySelector(".comment-score") as HTMLElement
    score.textContent = newScore

    const avatar = commentContent.querySelector(".avatar") as HTMLImageElement
    avatar.src = newAvatar

    const username = commentContent.querySelector(".username") as HTMLElement
    username.textContent = newUsername

    const createdAt = commentContent.querySelector(".created-at") as HTMLElement
    createdAt.textContent = newCreatedAt

    const content = commentContent.querySelector(".comment-content")
    content.textContent = newContent

    if (username.textContent == currentUser.username) {
      commentContent.setAttribute("aria-details", "user-comment")
    }

    addInteractive(commentContent, score)

    return commentContent
  }

  // Create reply comment
  function appendReplyArea(appendTo) {
    var replies = document.createElement("div")
    replies.innerHTML = replyBox.outerHTML
    replies.classList.add("comment-replies")
    const replyArea = replies.querySelector(".replies")
    appendTo.appendChild(replies)

    return replyArea
  }

  function appendReply(
    newID, newScore, newAvatar, newUsername, newCreatedAt, newContent, newReplyingTo, appendTo
  ) {
    const newReply = appendComment(
      newID, newScore, newAvatar, newUsername, newCreatedAt, newContent, appendTo
    )
    newReply.setAttribute("aria-owns", "reply")

    const replyingTo = newReply.querySelector(".replying-to") as HTMLElement
    replyingTo.textContent = "@" + newReplyingTo
  }

  // Create reply form
  function appendReplyForm(commentToReply) {
    var newReplyForm = document.createElement("div")
    newReplyForm.innerHTML = commentBox.outerHTML
    newReplyForm.classList.add("comment-reply-form")
    newReplyForm.style.paddingTop = ".45em"
    newReplyForm.style.animation = "slideDown 300ms forwards"

    const replyForm = commentToReply.querySelector(".reply-form")
    replyForm.appendChild(newReplyForm)

    let replyArea = commentToReply.querySelector(".comment-replies .replies")

    const existingReplyArea = commentToReply.parentElement.parentElement.querySelector(".replies")

    const replyAvatar = newReplyForm.querySelector(".user-avatar") as HTMLImageElement
    replyAvatar.src = currentUserAvatar

    const buttonReply = newReplyForm.querySelector(".send-btn") as HTMLElement
    buttonReply.textContent = "reply"

    const userReply = newReplyForm.querySelector(".user-comment-input") as HTMLInputElement

    buttonReply.addEventListener("click", () => {
      if (replyArea !== null) {
        if (userReply.value != "") {
          appendReply(
            commentSection.querySelectorAll(".comment").length + 1,
            "0",
            currentUserAvatar,
            currentUsername,
            "Just now",
            userReply.value,
            commentToReply.querySelector(".username").textContent,
            commentToReply.querySelector(".comment-replies .replies"),
          )
          newReplyForm.remove()
          userReply.value = ""
          openForm = false
        }
      } else {
        if (userReply.value != "" && existingReplyArea != null) {
          const newReplyArea = appendReplyArea(commentToReply)
          appendReply(
          commentSection.querySelectorAll(".comment").length + 1,
            "0",
            currentUserAvatar,
            currentUsername,
            "Just now",
            userReply.value,
            commentToReply.querySelector(".username").textContent,
            newReplyArea,
          )
          newReplyForm.remove()
          userReply.value = ""
          replyArea = "not null"
          openForm = false
        } else {
          if (userReply.value != "") {
            appendReply(
              commentSection.querySelectorAll(".comment").length + 1,
              "0",
              currentUserAvatar,
              currentUsername,
              "Just now",
              userReply.value,
              commentToReply.querySelector(".username").textContent,
              commentToReply.parentElement.parentElement,
            )
            newReplyForm.remove()
            userReply.value = ""
            openForm = false
          }
        }
      }

    })
  }

  // Remove all reply forms
  function removeReplyForms() {
    document.querySelectorAll<HTMLElement>(".comment-reply-form").forEach(form => {
      form.style.animation = "slideUp 200ms forwards"
      form.addEventListener("animationend", () => {
        form.remove()
      })
    })
  }

  // Interactive comments
  function addInteractive(newComment, currentScore) {
    const increaseScore = newComment.querySelector(".increase-score")
    increaseScore.addEventListener("click", () => {
      currentScore.textContent = (parseInt(currentScore.textContent) + 1).toString()
    })

    const decreaseScore = newComment.querySelector(".decrease-score")
    decreaseScore.addEventListener("click", () => {
      if (currentScore.textContent != "0") {
        currentScore.textContent = (parseInt(currentScore.textContent) - 1).toString()
      }
    })

    if (newComment.hasAttribute("aria-details", "user-comment")) {
      const repliesArea = newComment.parentElement.parentElement
      const iconDelete = newComment.querySelector(".icon-delete")
      iconDelete.addEventListener("click", () => {
        var newDeleteModal = document.createElement("div")
        newDeleteModal.innerHTML = deleteModal.outerHTML
        commentArea.appendChild(newDeleteModal)

        const deleteModalContent = newDeleteModal.querySelector(".delete-modal") as HTMLElement
        deleteModalContent.style.display = "flex"

        const buttonCancel = deleteModalContent.querySelector(".button-cancel")
        buttonCancel.addEventListener("click", () => {
          deleteModalContent.setAttribute("closing", "")
          deleteModalContent.addEventListener("animationend", () => {
            newDeleteModal.remove()
          })
        })

        const buttonDelete = deleteModalContent.querySelector(".button-delete")
        buttonDelete.addEventListener("click", () => {
          deleteModalContent.setAttribute("closing", "")
          deleteModalContent.addEventListener("animationend", () => {
            newDeleteModal.remove()
          })
          newComment.setAttribute("deleting", "")
          newComment.addEventListener("animationend", () => {
            newComment.parentElement.remove()
          })
          if (repliesArea.querySelectorAll(".comment").length == 1) {
            repliesArea.parentElement.style.animation = "slideRight 400ms forwards"
            repliesArea.parentElement.addEventListener("animationend", () => {
              repliesArea.parentElement.remove()
            })
          }
        })
      })

      const iconEdit = newComment.querySelector(".icon-edit")
      iconEdit.addEventListener("click", () => {
        const commentReplyTo = newComment.querySelector(".replying-to") as HTMLElement
        const commentContent = newComment.querySelector(".comment-content") as HTMLElement
        const editComment = newComment.querySelector(".edit-comment-form") as HTMLElement

        commentReplyTo.style.display = "none"
        commentContent.style.display = "none"

        editComment.style.animation = "slideFromDown 300ms forwards"
        editComment.style.display = "flex"

        const editInput = editComment.querySelector(".user-comment-input") as HTMLInputElement
        editInput.value = commentContent.textContent

        const updateBtn = editComment.querySelector(".update-btn")
        updateBtn.addEventListener("click", () => {
          if (editInput.value != "") {
            commentContent.textContent = editInput.value
            commentReplyTo.style.display = "inline"
            commentReplyTo.style.animation = "loading 900ms forwards"
            commentContent.style.display = "inline"
            commentContent.style.animation = "loading 900ms forwards"
            editComment.style.display = "none"
          }
        })
      })
    } else {
      const replyBtn = newComment.querySelector(".reply-btn")

      replyBtn.addEventListener("click", () => {
        if (openForm == false) {
          appendReplyForm(newComment)
          openForm = true
        } else {
        }

        document.addEventListener("keydown", (event) => {
          if (event.keyCode === 27) {
            removeReplyForms()
            openForm = false
          }
        });

      });

    }
  }

  // Load comments
  for (let id = 0; id < comments.length; id++) {
    const newComment = appendComment(
      comments[id].id,
      comments[id].score,
      comments[id].user.image.webp,
      comments[id].user.username,
      comments[id].createdAt,
      comments[id].content,
      commentSection
    )

    // Load replies for each comment
    if (comments[id].replies.length != 0) {
      const replyArea = appendReplyArea(newComment)

      for (let rp = 0; rp < comments[id].replies.length; rp++) {
        appendReply(
          comments[id].replies[rp].id,
          comments[id].replies[rp].score,
          comments[id].replies[rp].user.image.webp,
          comments[id].replies[rp].user.username,
          comments[id].replies[rp].createdAt,
          comments[id].replies[rp].content,
          comments[id].replies[rp].replyingTo,
          replyArea,
        )
      }
    }
  }

  // Add commentBox
  commentArea.appendChild(commentBox)

  const userAvatar = commentBox.querySelector(".user-avatar") as HTMLImageElement
  userAvatar.src = currentUserAvatar

  const commentInput = commentBox.querySelector(".user-comment-input") as HTMLInputElement

  const sendBtn = commentBox.querySelector(".send-btn")
  sendBtn.addEventListener("click", () => {
    if (commentInput.value != "") {
      appendComment(
        commentSection.querySelectorAll(".comment").length + 1,
        "0",
        currentUserAvatar,
        currentUsername,
        "Just now",
        commentInput.value,
        commentSection
      )
    }
    commentInput.value = ""
  })

</script>