---
import Comment from './Comment.astro';
import CommentBox from '../components/CommentBox.astro';
import Replies from "./Replies.astro";
import DeleteModal from './DeleteModal.astro';
---

<section class="container">

  <div class="comment-section">
    <Comment />
    <Replies />
  </div>

  <div class="comment-form">
    <CommentBox />
  </div>

  <DeleteModal />

</section>

<style>
  .container {
    display: flex;
    flex-direction: column;
    gap: 1em;
  }

  .comment-section {
    display: flex;
    flex-direction: column;
    gap: 1em
  }
</style>

<script>
import { createGetCollection } from "astro/content/runtime"

	var commentsData = {
		"currentUser": {
			"image": { 
				"png": "/avatars/image-juliusomo.png",
				"webp": "/avatars/image-juliusomo.webp"
			},
			"username": "juliusomo"
		},
		"comments": [
			{
				"id": 1,
				"content": "Impressive! Though it seems the drag feature could be improved. But overall it looks incredible. You've nailed the design and the responsiveness at various breakpoints works really well.",
				"createdAt": "1 month ago",
				"score": 12,
				"user": {
					"image": { 
						"png": "/avatars/image-amyrobson.png",
						"webp": "/avatars/image-amyrobson.webp"
					},
					"username": "amyrobson"
				},
				"replies": []
			},
			{
				"id": 2,
				"content": "Woah, your project looks awesome! How long have you been coding for? id'm still new, but think id want to dive into React as well soon. Perhaps you can give me an insight on where id can learn React? Thanks!",
				"createdAt": "2 weeks ago",
				"score": 5,
				"user": {
					"image": { 
						"png": "/avatars/image-maxblagun.png",
						"webp": "/avatars/image-maxblagun.webp"
					},
					"username": "maxblagun"
				},
				"replies": [
					{
						"id": 3,
						"content": "If you're still new, i'd recommend focusing on the fundamentals of HTML, CSS, and JS before considering React. It's very tempting to jump ahead but lay a solid foundation first.",
						"createdAt": "1 week ago",
						"score": 4,
						"replyingTo": "maxblagun",
						"user": {
							"image": { 
								"png": "/avatars/image-ramsesmiron.png",
								"webp": "/avatars/image-ramsesmiron.webp"
							},
							"username": "ramsesmiron"
						}
					},
					{
						"id": 4,
						"content": "I couldn't agree more with this. Everything moves so fast and it always seems like everyone knows the newest library/framework. But the fundamentals are what stay constant.",
						"createdAt": "2 days ago",
						"score": 2,
						"replyingTo": "ramsesmiron",
						"user": {
							"image": { 
								"png": "/avatars/image-juliusomo.png",
								"webp": "/avatars/image-juliusomo.webp"
							},
							"username": "juliusomo"
							}
						}
					]
				},
        {
				"id": 5,
				"content": "This is a comment that was made by me. Just for testing purposes",
				"createdAt": "1 week ago",
				"score": 7,
				"user": {
					"image": { 
						"png": "/avatars/image-amyrobson.png",
						"webp": "/avatars/image-amyrobson.webp"
					},
					"username": "juliusomo"
				},
				"replies": [
					{
						"id": 6,
						"content": "Some random text to show that this reply is unique",
						"createdAt": "1 week ago",
						"score": 4,
						"replyingTo": "juliusomo",
						"user": {
							"image": { 
								"png": "/avatars/image-ramsesmiron.png",
								"webp": "/avatars/image-ramsesmiron.webp"
							},
							"username": "ramsesmiron"
						}
					},
				]
			},
			]
		}

    const commentSection = document.querySelector(".comment-section")
    const commentTemplate = document.querySelector(".comment")
    const commentBox = document.querySelector(".comment-box")
    const userCommentForm = document.querySelector(".comment-form")
    const replies = document.querySelector(".reply-section")
    const deleteModal = document.querySelector(".delete-modal-wrapper")

    // Hide templates on HTML
    commentTemplate.remove()
    replies.remove()
    commentBox.remove()
    deleteModal.remove()

    // Load comments
    for (var id = 0; id < commentsData.comments.length; id++) {
      const commentId = commentsData.comments[id].id
      var newComment = document.createElement("div");
      newComment.innerHTML = commentTemplate.outerHTML;
      commentSection.appendChild(newComment);

      var replyInput = document.createElement("div")
      replyInput.innerHTML = commentBox.outerHTML
      replyInput.style.animation = "fadeIn 400ms forwards"

      const newCommentWrapper = newComment.querySelector(".comment-wrapper") as HTMLElement
      const newCommentContent = newComment.querySelector(".comment") as HTMLElement;
      newCommentContent.id = commentId.toString();

      const replyForm = newCommentContent.querySelector(".reply-form") as HTMLElement
    
      const score = newCommentContent.querySelector(".comment-score")
      score.textContent = commentsData.comments[id].score.toString()

      const avatar = newCommentContent.querySelector<HTMLImageElement>(".avatar")
      avatar.src = commentsData.comments[id].user.image.webp

      const username = newCommentContent.querySelector(".username")
      username.textContent = commentsData.comments[id].user.username

      const createdAt = newCommentContent.querySelector(".created-at")
      createdAt.textContent = commentsData.comments[id].createdAt

      const content = newCommentContent.querySelector(".comment-content")
      content.textContent = commentsData.comments[id].content

      const replyBtn = newCommentContent.querySelector(".reply-btn")
      replyBtn.addEventListener("click", () => {
        replyForm.append(replyInput)
        replyForm.style.paddingTop = ".45em"
        var userFormAvatar = replyInput.querySelector(".user-avatar") as HTMLImageElement
        userFormAvatar.src = commentsData.currentUser.image.webp

        const replySend = replyInput.querySelector(".send-btn")
        replySend.addEventListener("click", () => {
          const replyContent = replyInput.querySelector(".user-comment-input") as HTMLInputElement
          if (replyContent.value != "") {
            const reply = document.createElement("div")
            reply.classList.add("replies")
            reply.innerHTML = replies.outerHTML
            newCommentContent.parentElement.appendChild(reply)
            const repliesContent = reply.querySelector(".replies")

            const newReplyComment = document.createElement("div")
            newReplyComment.innerHTML = commentTemplate.outerHTML

            repliesContent.appendChild(newReplyComment)

            const newReplyContent = newReplyComment.querySelector(".comment-wrapper") as HTMLElement

            const score = newReplyContent.querySelector(".comment-score")

            const avatar = newReplyContent.querySelector(".avatar") as HTMLImageElement
            avatar.src = commentsData.currentUser.image.webp

            const username = newReplyContent.querySelector(".username") as HTMLElement
            username.textContent = commentsData.currentUser.username

            const createdAt = newReplyContent.querySelector(".created-at")
            createdAt.textContent = "A few seconds ago"

            const replyingTo = newReplyContent.querySelector(".replying-to") as HTMLElement
            replyingTo.textContent = "@" + newCommentContent.querySelector(".username").textContent

            const content = newReplyContent.querySelector(".comment-content") as HTMLElement
            content.textContent = replyContent.value

            const iconDelete = newReplyComment.querySelector(".icon-delete")
            iconDelete.addEventListener("click", () => {

            })

            const iconEdit = newReplyComment.querySelector(".icon-edit")
            iconEdit.addEventListener("click", () => {
              const editInput = newReplyContent.querySelector(".edit-comment-form") as HTMLElement
              const editComment = editInput.querySelector(".user-comment-input") as HTMLInputElement
              editInput.style.display = "flex"
              content.style.display = "none"
              replyingTo.style.display = "none"
              editComment.value = content.textContent 
              const updateBtn = editInput.querySelector(".update-btn")
              updateBtn.addEventListener("click", () => {
                if (editComment.value != "") {
                  content.textContent = editComment.value
                  editInput.style.display = "none"
                  content.style.display = "inline"
                  replyingTo.style.display = "inline"
                }
              })
            })

            newReplyContent.setAttribute("aria-details", "user-comment")
            newReplyContent.setAttribute("aria-owns", "reply")
            replyInput.remove()
          }
        })
      })

      const increaseScore = newComment.querySelector(".increase-score")
      increaseScore.addEventListener("click", () => {
        score.textContent = (parseInt(score.textContent) + 1).toString()
      })

      const decreaseScore = newComment.querySelector(".decrease-score")
      decreaseScore.addEventListener("click", () => {
        if (score.textContent != "0") {
          score.textContent = (parseInt(score.textContent) - 1).toString()
        }
      })

      if (username.textContent == commentsData.currentUser.username) {
        newCommentWrapper.setAttribute("aria-details", "user-comment")

        const iconDelete = newComment.querySelector(".icon-delete")

        const iconEdit = newComment.querySelector(".icon-edit")
        iconEdit.addEventListener("click", () => {
          console.log("√çcono de editar")
        })
      }

      // Load replies
      if (commentsData.comments[id].replies.length != 0) {
        const reply = document.createElement("div")
        reply.classList.add("replies")
        reply.innerHTML = replies.outerHTML
        newComment.append(reply)
        const repliesContent = reply.querySelector(".replies")
        for(var rp = 0; rp < commentsData.comments[id].replies.length; rp++) {
          const replyId = commentsData.comments[id].replies[rp].id
          const newComment = document.createElement("div")
          newComment.innerHTML = commentTemplate.outerHTML;
          repliesContent.appendChild(newComment);
          const newCommentContent = newComment.querySelector(".comment-wrapper") as HTMLElement;
          newCommentContent.id = replyId.toString();
          const replyForm = newComment.querySelector(".reply-form") as HTMLElement

          const score = newCommentContent.querySelector(".comment-score")
          score.textContent = commentsData.comments[id].replies[rp].score.toString()

          const avatar = newCommentContent.querySelector<HTMLImageElement>(".avatar")
          avatar.src = commentsData.comments[id].replies[rp].user.image.webp

          const username = newCommentContent.querySelector(".username")
          username.textContent = commentsData.comments[id].replies[rp].user.username

          const createdAt = newCommentContent.querySelector(".created-at")
          createdAt.textContent = commentsData.comments[id].replies[rp].createdAt

          const replyingTo = newCommentContent.querySelector(".replying-to") as HTMLElement
          replyingTo.textContent = "@" + commentsData.comments[id].replies[rp].replyingTo

          const content = newCommentContent.querySelector(".comment-content") as HTMLElement
          content.textContent = commentsData.comments[id].replies[rp].content
          
          const replyBtn = newCommentContent.querySelector(".reply-btn")
          replyBtn.addEventListener("click", () => {
            newComment.append(replyInput)
            replyForm.style.paddingTop = ".45em"
            var userFormAvatar = replyInput.querySelector(".user-avatar") as HTMLImageElement
            userFormAvatar.src = commentsData.currentUser.image.webp

            const replyContent = replyInput.querySelector(".user-comment-input") as HTMLTextAreaElement

            const replySend = replyInput.querySelector(".send-btn")
            replySend.addEventListener("click", () => {
              if (replyContent.value != "") {
                var newReply = document.createElement("div")
                newReply.innerHTML = commentTemplate.outerHTML
                newReply.style.animation = "fadeIn 400ms forwards"
                repliesContent.appendChild(newReply)

                const newReplyContent = newReply.querySelector(".comment-wrapper")

                newReplyContent.setAttribute("aria-details", "user-comment")
                newReplyContent.setAttribute("aria-owns", "reply")

                const score = newReplyContent.querySelector(".comment-score")

                const avatar = newReplyContent.querySelector<HTMLImageElement>(".avatar")
                avatar.src = commentsData.currentUser.image.webp

                const username = newReplyContent.querySelector(".username")
                username.textContent = commentsData.currentUser.username

                const createdAt = newReplyContent.querySelector(".created-at")
                createdAt.textContent = "A few seconds ago"

                const replyingTo = newReplyContent.querySelector(".replying-to") as HTMLElement
                replyingTo.textContent = "@" + newComment.querySelector(".username").textContent

                const content = newReplyContent.querySelector(".comment-content") as HTMLElement
                content.textContent = replyContent.value

                const iconDelete = newReplyContent.querySelector(".icon-delete")

                const iconEdit = newReplyContent.querySelector(".icon-edit")
                iconEdit.addEventListener("click", () => {
                  const editInput = newReplyContent.querySelector(".edit-comment-form") as HTMLElement
                  const editComment = editInput.querySelector(".user-comment-input") as HTMLInputElement
                  editInput.style.display = "flex"
                  content.style.display = "none"
                  replyingTo.style.display = "none"
                  editComment.value = content.textContent

                  const updateBtn = editInput.querySelector(".update-btn")
                  updateBtn.addEventListener("click", () => {
                    if (editComment.value != "") {
                      content.textContent = editComment.value
                      editInput.style.display = "none"
                      content.style.display = "inline"
                      replyingTo.style.display = "inline"
                    }
                  })
                })

                replyInput.remove()

                replyContent.value = ""
            }
            })
          })


          const increaseScore = newComment.querySelector(".increase-score")
          increaseScore.addEventListener("click", () => {
            score.textContent = (parseInt(score.textContent) + 1).toString()
          })

          const decreaseScore = newComment.querySelector(".decrease-score")
          decreaseScore.addEventListener("click", () => {
            if (score.textContent != "0") {
              score.textContent = (parseInt(score.textContent) - 1).toString()
            }
          })

          newCommentContent.setAttribute("aria-owns", "reply")
          if (username.textContent == commentsData.currentUser.username) {
            newCommentContent.setAttribute("aria-details", "user-comment")

            const iconDelete = newComment.querySelector(".icon-delete")

            const iconEdit = newComment.querySelector(".icon-edit")
            iconEdit.addEventListener("click", () => {
              const editInput = newCommentContent.querySelector(".edit-comment-form") as HTMLElement
              const editComment = editInput.querySelector(".user-comment-input") as HTMLInputElement
              editInput.style.display = "flex"
              content.style.display = "none"
              replyingTo.style.display = "none"
              editComment.value = content.textContent

              const updateBtn = editInput.querySelector(".update-btn")
              updateBtn.addEventListener("click", () => {
                if (editComment.value != "") {
                  content.textContent = editComment.value
                  editInput.style.display = "none"
                  content.style.display = "inline"
                  replyingTo.style.display = "inline"
                }
              })
            })
          }
        }
      }

    }

    // User commentbox
    var userCommentBox = document.createElement("div")
    userCommentBox.innerHTML = commentBox.outerHTML

    userCommentForm.appendChild(userCommentBox)
    const userAvatar = userCommentBox.querySelector(".user-avatar") as HTMLImageElement
    const commentInput = userCommentBox.querySelector<HTMLTextAreaElement>(".user-comment-input")
    const sendBtn = userCommentBox.querySelector(".send-btn")

    userAvatar.src = commentsData.currentUser.image.webp

    sendBtn.addEventListener("click", () => {
      var userCommentInput = commentInput.value

      if (userCommentInput != "") {
        var newComment = document.createElement("div");
        newComment.innerHTML = commentTemplate.outerHTML;
        commentSection.appendChild(newComment);
        const newCommentContent = newComment.querySelector(".comment-wrapper") as HTMLElement;
        newCommentContent.id = id.toString();
  
        const score = newCommentContent.querySelector(".comment-score")
  
        const avatar = newCommentContent.querySelector<HTMLImageElement>(".avatar")
        avatar.src = commentsData.currentUser.image.webp
  
        const username = newCommentContent.querySelector(".username")
        username.textContent = commentsData.currentUser.username
  
        const createdAt = newCommentContent.querySelector(".created-at")
        createdAt.textContent = "A few seconds ago"
  
        const content = newCommentContent.querySelector(".comment-content") as HTMLElement
        content.textContent = userCommentInput
  
        const increaseScore = newComment.querySelector(".increase-score")
        increaseScore.addEventListener("click", () => {
          score.textContent = (parseInt(score.textContent) + 1).toString()
        })
  
        const decreaseScore = newComment.querySelector(".decrease-score")
        decreaseScore.addEventListener("click", () => {
          if (score.textContent != "0") {
            score.textContent = (parseInt(score.textContent) - 1).toString()
          }
        })

        const iconDelete = newComment.querySelector(".icon-delete")

        const iconEdit = newComment.querySelector(".icon-edit")
        iconEdit.addEventListener("click", () => {
          const editInput = newCommentContent.querySelector(".edit-comment-form") as HTMLElement
          const editComment = editInput.querySelector(".user-comment-input") as HTMLInputElement
          editInput.style.display = "flex"
          content.style.display = "none"
          editComment.value = content.textContent

          const updateBtn = editInput.querySelector(".update-btn")
          updateBtn.addEventListener("click", () => {
            if (editComment.value != "") {
              content.textContent = editComment.value
              editInput.style.display = "none"
              content.style.display = "inline"
            }
          })
        })
  
        newCommentContent.setAttribute("aria-details", "user-comment")

        commentInput.value = ""
      }
    })
</script>